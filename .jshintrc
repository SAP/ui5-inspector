{
    // {int} Maximum error before stopping
    "maxerr": 100,

    // ================================================================================
    // Enforcing
    // ================================================================================

    // true: Prohibit bitwise operators (&, |, ^, etc.)
    "bitwise": false,

    // true: Identifiers must be in camelCase
    "camelcase": true,

    // true: Require {} for every new block or scope
    "curly": true,

    // true: Require triple equals (===) for comparison
    "eqeqeq": true,

    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
    "immed": true,

    // {int} Number of spaces to use for indentation.
    "indent": 4,

    // true: Require variables/functions to be defined before being used
    "latedef": true,

    // true: Require capitalization of all constructor functions e.g. `new F()`
    "newcap": true,

    // true: Prohibit use of `arguments.caller` and `arguments.callee`
    "noarg": true,

    // true: Prohibit use of empty blocks
    "noempty": true,

    // true: Prohibit use of constructors for side-effects (without assignment)
    "nonew": false,

    // true: Prohibit use of `++` & `--`
    "plusplus": false,

    // Quotation mark consistency:
    "quotmark": "single",

    // true: Require all non-global variables to be declared (prevents global leaks)
    "undef": true,

    // true: Requires all functions run in ES5 Strict Mode
    "strict": false,

    // {int} Max number of formal params allowed per function
    "maxparams": 4,

    // {int} Max depth of nested blocks (within functions)
    "maxdepth": 3,

    // {int} Max number statements per function
    "maxstatements": 30,

    // {int} Max cyclomatic complexity per function. The cyclomatic complexity of a section of source code is the count
    // of the number of linearly independent paths through the source code.
    "maxcomplexity": 12,

    // ================================================================================
    // Relaxing
    // ================================================================================

    // true: Tolerate Automatic Semicolon Insertion (no semicolons)
    "asi": false,

    // true: Tolerate assignments where comparisons would be expected
    "boss": false,

    // true: Allow debugger statements e.g. browser breakpoints.
    "debug": true,

    // true: Tolerate use of `== null`
    "eqnull": false,

    // true: Allow ES5 syntax (ex: getters and setters)
    "es5": false,

    // true: Allow ES.next (ES6) syntax (ex: `const`)
    "esnext": true,

    // true: Allow Mozilla specific syntax (extends and overrides esnext features)(ex: `for each`, multiple try/catch, function expressionâ€¦)
    "moz": false,

    // true: Tolerate use of `eval` and `new Function()`
    "evil": false,

    // true: Tolerate `ExpressionStatement` as Programs
    "expr": true,

    // true: Tolerate defining variables inside control statements"
    "funcscope": false,

    // true: Allow global "use strict" (also enables 'strict')
    "globalstrict": false,

    // true: Tolerate using the `__iterator__` property
    "iterator": false,

    // true: Tolerate omitting a semicolon for the last statement of a 1-line block
    "lastsemic": false,

    // true: Tolerate possibly unsafe line breakings
    "laxbreak": false,

    // true: Tolerate comma-first style coding
    "laxcomma": false,

    // true: Tolerate functions being defined in loops
    "loopfunc": false,

    // true: Tolerate multi-line strings
    "multistr": false,

    // true: Tolerate using the `__proto__` property
    "proto": false,

    // true: Tolerate script-targeted URLs
    "scripturl": false,

    // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
    "shadow": false,

    // true: Tolerate using `[]` notation when it can still be expressed in dot notation
    "sub": false,

    // true: Tolerate `new function () { ... };` and `new Object;`
    "supernew": false,

    // true: Tolerate using this in a non-constructor function
    "validthis": false,

    // ================================================================================
    // Environments
    // ================================================================================

    // Web Browser (window, document, etc)
    "browser": true,

    // Development/debugging (alert, confirm, etc)
    "devel": true,

    // jQuery
    "jquery": true,

    // Node.js
    "node": true,

    // Mocha.js
    "mocha": true,

    // Additional predefined global variables
    "globals": {
        "chrome": true,
        "sap": true,
        "expect": true,
        "sinon": true,
        "should": true,
        "Event": true,
		"ace": true
    }
}
